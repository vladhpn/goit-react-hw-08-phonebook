{"version":3,"sources":["components/ContactList/styles.module.scss","components/Form/styles.module.scss","components/Filter/styles.module.scss","components/ContactList/ContactList.jsx","components/Form/Form.jsx","components/Filter/Filter.jsx","views/Contacts/Contacts.jsx"],"names":["module","exports","connect","state","contacts","selectors","getVisibleContacts","dispatch","onDeleteContact","id","operations","deleteContact","className","styles","list","map","name","number","item","button","onClick","Form","handleInputChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","find","toLowerCase","toast","warning","reset","onSubmit","title","this","form","label","text","input","type","onChange","pattern","required","content","Component","addContact","getFilter","e","action","changeFilter","target","Contacts","fetchContacts","dispacth"],"mappings":"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","file":"static/js/contacts.3d92c714.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"styles_list__xjOlh\",\"item\":\"styles_item__wRJt2\",\"button\":\"styles_button__AJHCf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"styles_title__1YmCD\",\"form\":\"styles_form__3BTQv\",\"label\":\"styles_label__1Ku7G\",\"input\":\"styles_input__2RtgK\",\"text\":\"styles_text__2Muy-\",\"button\":\"styles_button__3_r4I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"styles_title__2ThQ_\",\"label\":\"styles_label__1EQMF\",\"text\":\"styles_text__H1lwr\",\"input\":\"styles_input__3cObw\"};","import { connect } from 'react-redux'\nimport { operations, selectors } from '../../redux/contacts';\nimport PropTypes from 'prop-types';\nimport styles from './styles.module.scss'\n\n\nconst ContactList = ({contacts, onDeleteContact }) =>{return (<>\n    <ul className={styles.list} >{contacts.map(({id, name, number}) => <li key={id} className={styles.item}>\n        <p>{name}:</p>\n        <p>{number}</p>\n        <button className={styles.button} onClick={()=> onDeleteContact(id)}>Delete</button>\n        </li>)}\n        </ul> </>);\n    } \n\n    ContactList.propTypes = {\n     onDeleteContact: PropTypes.func.isRequired\n    }\n\n      const mapStateToProps = state => ({\n        contacts: selectors.getVisibleContacts(state)\n    })\n    const mapDispatchToProps = dispatch => ({\n        onDeleteContact: (id) => dispatch(operations.deleteContact(id)),\n    })\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport { operations } from '../../redux/contacts';\nimport { toast } from 'react-toastify';\nimport styles from '../Form/styles.module.scss';\n\n\nclass Form extends Component{\n\n    state = {\n        name: '',\n        number: '',\n    }\n\n    handleInputChange = (event) => {\n        const { name, value } = event.currentTarget;\n        this.setState({\n          [name]: value,\n        });\n      };\n   \n\n      handleSubmit = (event) => {\n        event.preventDefault();\n\n        const { name } = this.state;\n        const { contacts } = this.props;\n        const findContact = contacts.find(\n          (item) => item.name.toLowerCase() === name.toLowerCase()\n        );\n        if (findContact) {\n          toast.warning(`${name} is already in contacts`);\n          this.reset();\n          return;\n        }\n\n        this.props.onSubmit(this.state );\n        this.reset();\n      };\n\n      reset = () => {\n          this.setState({name : '', number : ''})\n      }\n\n   \n\n    render(){\n        return(<>\n        \n            <h1 className={styles.title}>Phone book</h1>\n            <form onSubmit={this.handleSubmit} className={styles.form}>\n              <label className={styles.label}>\n                <span className={styles.text}>Name</span>\n                <input className={styles.input}\n                  type='text'\n                  name='name'\n                  value={this.state.name}\n                  onChange={this.handleInputChange}\n                  pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                  title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                  required\n                />\n              </label>\n              <label className={styles.label}>\n                <span className={styles.text}>Phone</span>\n                <input className={styles.input}\n                  type='tel'\n                  name='number'\n                  value={this.state.number}\n                  onChange={this.handleInputChange}\n                  // pattern='(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})'\n                  title='Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +'\n                  required\n                />\n              </label>\n              <button className={styles.button} type='submit'><span className={styles.content}>Add contact</span> </button>\n            </form>\n            \n          </>)\n    }\n}\n\nconst mapStateToProps = ({ contacts: { contacts } }) => ({\n  contacts,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: (name,number) => dispatch(operations.addContact(name,number)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { action, selectors } from '../../redux/contacts'\nimport styles from './styles.module.scss'\n\nconst Filter = ({value, onChange}) => {\n    return(<>\n    <h2 className={styles.title}>Contacts</h2>  \n     <label className={styles.label}>\n       <span className={styles.text}>Find contacts by name</span> \n        \n          <input className={styles.input} type='text' value={value} onChange={onChange} />\n        \n      </label> </>)}\n\n      Filter.propTypes = {\n        value: PropTypes.string,\n        onChange: PropTypes.func.isRequired\n      }\n\n      const mapStateToProps = (state) => ({\n         value: selectors.getFilter(state)\n    })\n     const mapDispatchToProps =  dispatch => ({\n       onChange: e => dispatch(action.changeFilter(e.target.value))\n     })\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import { Component } from 'react';\n\nimport { connect } from 'react-redux';\nimport ContactList from '../../components/ContactList'\nimport Form from '../../components/Form';\nimport Filter from '../../components/Filter'\nimport { operations, } from '../../redux/contacts';\n\nclass Contacts extends Component {\n    componentDidMount() {\n        this.props.fetchContacts();\n      }\n      render() {\n        return ( \n            <>    \n            <Form />\n            <Filter />    \n             <ContactList />\n             </>\n        );\n      }\n    }\n  \n    const mapDispatchToProps = dispacth => ({\n      fetchContacts: () => dispacth(operations.fetchContacts()),\n    });\n    export default connect(null, mapDispatchToProps)(Contacts);"],"sourceRoot":""}